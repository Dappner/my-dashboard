/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SpendingRoutesImport } from './routes/spending-routes'
import { Route as ReadingRoutesImport } from './routes/reading-routes'
import { Route as InvestingRoutesImport } from './routes/investing-routes'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SpendingRoutesRoute = SpendingRoutesImport.update({
  id: '/spending-routes',
  path: '/spending-routes',
  getParentRoute: () => rootRoute,
} as any)

const ReadingRoutesRoute = ReadingRoutesImport.update({
  id: '/reading-routes',
  path: '/reading-routes',
  getParentRoute: () => rootRoute,
} as any)

const InvestingRoutesRoute = InvestingRoutesImport.update({
  id: '/investing-routes',
  path: '/investing-routes',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/investing-routes': {
      id: '/investing-routes'
      path: '/investing-routes'
      fullPath: '/investing-routes'
      preLoaderRoute: typeof InvestingRoutesImport
      parentRoute: typeof rootRoute
    }
    '/reading-routes': {
      id: '/reading-routes'
      path: '/reading-routes'
      fullPath: '/reading-routes'
      preLoaderRoute: typeof ReadingRoutesImport
      parentRoute: typeof rootRoute
    }
    '/spending-routes': {
      id: '/spending-routes'
      path: '/spending-routes'
      fullPath: '/spending-routes'
      preLoaderRoute: typeof SpendingRoutesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/investing-routes': typeof InvestingRoutesRoute
  '/reading-routes': typeof ReadingRoutesRoute
  '/spending-routes': typeof SpendingRoutesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/investing-routes': typeof InvestingRoutesRoute
  '/reading-routes': typeof ReadingRoutesRoute
  '/spending-routes': typeof SpendingRoutesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/investing-routes': typeof InvestingRoutesRoute
  '/reading-routes': typeof ReadingRoutesRoute
  '/spending-routes': typeof SpendingRoutesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/investing-routes' | '/reading-routes' | '/spending-routes'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/investing-routes' | '/reading-routes' | '/spending-routes'
  id:
    | '__root__'
    | '/'
    | '/investing-routes'
    | '/reading-routes'
    | '/spending-routes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InvestingRoutesRoute: typeof InvestingRoutesRoute
  ReadingRoutesRoute: typeof ReadingRoutesRoute
  SpendingRoutesRoute: typeof SpendingRoutesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InvestingRoutesRoute: InvestingRoutesRoute,
  ReadingRoutesRoute: ReadingRoutesRoute,
  SpendingRoutesRoute: SpendingRoutesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/investing-routes",
        "/reading-routes",
        "/spending-routes"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/investing-routes": {
      "filePath": "investing-routes.tsx"
    },
    "/reading-routes": {
      "filePath": "reading-routes.tsx"
    },
    "/spending-routes": {
      "filePath": "spending-routes.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

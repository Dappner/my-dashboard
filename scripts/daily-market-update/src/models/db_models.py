"""
Data models representing Supabase database schema.
These models define the structure for data to be stored in the database.
"""

from typing import List, Optional
from datetime import datetime, date
from enum import Enum
from pydantic import BaseModel, Field, ConfigDict, field_validator

# Common configuration for all database models
model_config = ConfigDict(
    extra="forbid",
)


class CurrencyType(str, Enum):
    """Currency types supported in the database"""

    EUR = "EUR"
    USD = "USD"
    CAD = "CAD"
    GBP = "GBP"
    JPY = "JPY"
    AUD = "AUD"
    CNY = "CNY"


class TransactionType(str, Enum):
    """Transaction types in the database"""

    BUY = "buy"
    SELL = "sell"
    DIVIDEND = "dividend"
    DEPOSIT = "deposit"
    WITHDRAW = "withdraw"


class DBQuoteType(str, Enum):
    """Quote types stored in the database"""

    EQUITY = "EQUITY"
    ETF = "ETF"
    MUTUALFUND = "MUTUALFUND"
    INDEX = "INDEX"
    CURRENCY = "CURRENCY"
    CRYPTOCURRENCY = "CRYPTOCURRENCY"


class DBHistoricalPrice(BaseModel):
    """Historical price data model for database"""

    model_config = model_config

    ticker_id: str
    date: str = Field(..., pattern=r"^\d{4}-\d{2}-\d{2}$")  # YYYY-MM-DD
    open_price: Optional[float] = None
    high_price: Optional[float] = None
    low_price: Optional[float] = None
    close_price: Optional[float] = None
    dividends: Optional[float] = None
    stock_splits: Optional[float] = None
    volume: Optional[int] = None
    created_at: Optional[str] = None
    updated_at: str = Field(default_factory=lambda: datetime.now().isoformat())

    @field_validator("date")
    @classmethod
    def validate_date_format(cls, v):
        """Ensure date is in YYYY-MM-DD format"""
        if isinstance(v, datetime):
            return v.strftime("%Y-%m-%d")
        if isinstance(v, date):
            return v.strftime("%Y-%m-%d")
        return v


class DBTickerInfo(BaseModel):
    """Ticker information model for database"""

    model_config = model_config

    # The fields below match your Supabase 'tickers' table
    id: str  # Primary key UUID
    name: Optional[str] = None
    quote_type: str = "EQUITY"
    region: Optional[str] = None
    category: Optional[str] = None
    sector_id: Optional[str] = None
    industry_id: Optional[str] = None
    long_business_summary: Optional[str] = None
    dividend_amount: Optional[float] = None
    dividend_months: Optional[List[int]] = None
    cik: Optional[str] = None
    backfill: bool = False
    created_at: Optional[str] = None
    updated_at: str = Field(default_factory=lambda: datetime.now().isoformat())


class DBFinanceDaily(BaseModel):
    """Daily finance data model for database"""

    model_config = model_config

    # The fields below match your Supabase 'yh_finance_daily' table
    id: Optional[str] = None  # UUID will be generated by database
    ticker_id: str
    date: str = Field(default_factory=lambda: date.today().strftime("%Y-%m-%d"))
    regular_market_price: Optional[float] = None
    regular_market_change_percent: Optional[float] = None
    regular_market_volume: Optional[int] = None
    market_cap: Optional[int] = None
    dividend_yield: Optional[float] = None
    fifty_two_week_low: Optional[float] = None
    fifty_two_week_high: Optional[float] = None
    fifty_day_average: Optional[float] = None
    two_hundred_day_average: Optional[float] = None
    trailing_pe: Optional[float] = None
    shares_outstanding: Optional[int] = None
    profit_margins: Optional[float] = None

    # Fund-specific fields
    total_assets: Optional[int] = None
    nav_price: Optional[float] = None
    yield_: Optional[float] = Field(None, alias="yield")
    ytd_return: Optional[float] = None
    three_year_average_return: Optional[float] = None
    five_year_average_return: Optional[float] = None
    trailing_three_month_returns: Optional[float] = None
    trailing_three_month_nav_returns: Optional[float] = None
    beta: Optional[float] = None
    beta3year: Optional[float] = None

    # Other fund information
    fund_family: Optional[str] = None
    fund_inception_date: Optional[str] = None
    legal_type: Optional[str] = None
    net_expense_ratio: Optional[float] = None

    # Additional financial metrics
    eps_trailing_ttm: Optional[float] = None
    eps_forward: Optional[float] = None
    price_eps_current_year: Optional[float] = None
    average_analyst_rating: Optional[float] = None

    # Timestamps
    created_at: Optional[str] = None
    updated_at: str = Field(default_factory=lambda: datetime.now().isoformat())


class DBEventType(str, Enum):
    """Event types for calendar events"""

    DIVIDEND = "dividend"
    EX_DIVIDEND = "ex_dividend"
    EARNINGS = "earnings"


class DBCalendarEvent(BaseModel):
    """Calendar event model for database"""

    model_config = model_config

    id: Optional[str] = None  # UUID will be generated by database
    ticker_id: str
    date: str = Field(..., pattern=r"^\d{4}-\d{2}-\d{2}$")
    event_type: DBEventType
    earnings_dates: Optional[List[str]] = None
    earnings_high: Optional[float] = None
    earnings_low: Optional[float] = None
    earnings_average: Optional[float] = None
    revenue_high: Optional[int] = None
    revenue_low: Optional[int] = None
    revenue_average: Optional[int] = None
    created_at: Optional[str] = None
    updated_at: str = Field(default_factory=lambda: datetime.now().isoformat())


class DBFundHolding(BaseModel):
    """Fund holding model for database"""

    model_config = model_config

    id: Optional[str] = None  # UUID will be generated by database
    ticker_id: str
    holding_symbol: str
    holding_name: str
    weight: float
    date: str = Field(default_factory=lambda: date.today().strftime("%Y-%m-%d"))
    created_at: Optional[str] = None
    updated_at: str = Field(default_factory=lambda: datetime.now().isoformat())


class DBSectorWeighting(BaseModel):
    """Fund sector weighting model for database"""

    model_config = model_config

    id: Optional[str] = None  # UUID will be generated by database
    ticker_id: str
    sector_name: str
    weight: float
    date: str = Field(default_factory=lambda: date.today().strftime("%Y-%m-%d"))
    created_at: Optional[str] = None
    updated_at: str = Field(default_factory=lambda: datetime.now().isoformat())


class DBAssetClass(BaseModel):
    """Fund asset class model for database"""

    model_config = model_config

    id: Optional[str] = None  # UUID will be generated by database
    ticker_id: str
    asset_class: str
    weight: float
    date: str = Field(default_factory=lambda: date.today().strftime("%Y-%m-%d"))
    created_at: Optional[str] = None
    updated_at: str = Field(default_factory=lambda: datetime.now().isoformat())


class DBSuggestedTrade(BaseModel):
    """Suggested trade model for database"""

    model_config = model_config

    id: Optional[str] = None  # UUID will be generated by database
    user_id: str
    ticker_id: str
    transaction_type: TransactionType
    transaction_date: str = Field(..., pattern=r"^\d{4}-\d{2}-\d{2}$")
    shares: float
    price_per_share: float
    is_dividend_reinvestment: bool = False
    source_trade_id: Optional[str] = None
    created_at: str = Field(default_factory=lambda: datetime.now().isoformat())

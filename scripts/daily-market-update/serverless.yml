service: daily-market-update
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.10
  region: us-east-1
  profile: my-dashboard
  architecture: x86_64
  environment:
    SUPABASE_URL: ${ssm:/daily-market-update/supabase-url}
    SUPABASE_KEY: ${ssm:/daily-market-update/supabase-key}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource: "arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/daily-market-update/*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:*:*:*"
  apiGateway:
    # Add API key required setting
    apiKeys:
      - name: daily-market-update-api-key
        description: API Key for daily market update service
    usagePlan:
      quota:
        limit: 1000
        period: DAY
      throttle:
        burstLimit: 20
        rateLimit: 10

plugins:
  - serverless-python-requirements

# custom:
#   pythonRequirements:
#     dockerizePip: non-linux
#     dockerFile: ./Dockerfile
#     dockerDisableCache: true
#     layer: false
#
package:
  individually: false

functions:
  processTickerData:
    handler: src.lambda_handler.lambda_handler
    events:
      # Schedule events as before
      - schedule:
          rate: cron(0 10 ? * MON-SUN *)
          enabled: true
      - schedule:
          rate: cron(0 11 ? * MON-SUN *)
          enabled: true
      - schedule:
          rate: cron(0 16 ? * MON-SUN *)
          enabled: true
      - schedule:
          rate: cron(0 17 ? * MON-SUN *)
          enabled: true
      - schedule:
          rate: cron(30 21 ? * MON-FRI *)
          enabled: true
      - schedule:
          rate: cron(30 22 ? * MON-FRI *)
          enabled: true
      - schedule:
          rate: cron(0 4 ? * MON-SUN *)
          enabled: true
      - schedule:
          rate: cron(0 5 ? * MON-SUN *)
          enabled: true
      # HTTP event with API key requirement
      - http:
          path: process-ticker
          method: post
          cors: true
          private: true # This requires an API key
          request:
            schemas:
              application/json:
                schema: ${file(src/schemas/ticker-request-schema.json)}
                name: TickerRequestModel
                description: "Ticker processing request model"
    timeout: 300 # 5 minutes
    memorySize: 512
